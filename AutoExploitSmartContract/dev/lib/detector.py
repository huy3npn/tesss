import random, json
from colorama import Fore

def debug(*args, color=Fore.MAGENTA):
    print(color + "***************[DEBUG]***************")
    print(color + str(args))
    
class Detector:
    def __init__(self, provider, accounts):
        self.provider = provider
        self.accounts = accounts
        self.base_address = accounts[0]
    
    def checkOracle(self, prev_base, post_base, prev_attack, post_attack):
        is_violate = False
        if(prev_base + prev_attack < post_base + post_attack):
            is_violate = True
        return is_violate

    def calculate_Rblock(self):
        
    def calculate_Rcov(self, M, group_numbers):
        N = group_numbers  # number of function gr (all off )
        Rcov_product = 1.0
        for i in range(N):
            product = 1.0
            j=1
            for j in range(len(M[i])):
                product += self.calculate_Rblock(j)
            Rcov_product += (1.0 / len(M[i])) * product
        return Rcov_product * (1/N)
    
    def calculate_Rmix(self):

    def execute(self, contract, function):
        prev_base_balance   = self.provider.eth.get_balance(self.base_address)
        prev_attack_balance = self.provider.eth.get_balance(self.accounts[1])

        func_call = self.player.get_function_by_signature(function)
        func_name = function.split('(')[0]
        params    = function.split('(')[1].replace(')', '').split(',')
        
        try:
            list_param = []

            # Randomize input
            for param in params:
                if('uint' in param):
                    # value = random.choice(  [0, 1, 2, 3, random.randint(0, 10e9), random.randint(0, 10e9),random.randint(0, 10e9)])
                    value = 0
                    list_param += [int(value)]
                elif('int' in param):
                    value = random.randint(-10e9, 10e9)
                    list_param += [int(value)]
                elif('address' in param):
                    list_param += [random.choice(self.accounts)]

            debug("CALL", func_name + "(" + str(list_param) + ")", color=Fore.CYAN)


            tx_hash = func_call(*list_param).transact({'from': self.accounts[1]})
            # tx_receipt = self.provider.eth.waitForTransactionReceipt(tx_hash)

            post_base_balance   = self.provider.eth.get_balance(self.base_address)
            post_attack_balance = self.provider.eth.get_balance(self.accounts[1])
            
            self.update_features(contract, func_name, tx_hash)

            

            return {
                'SC': json.dumps(self.contracts[contract].features),
                'F':  json.dumps(self.contracts[contract].function_records[func_name].features),
                'Rewards': 1
            }
        
        except Exception as err:
            debug(err, color=Fore.RED)
            last_block = self.provider.eth.getBlock('latest')
            last_transactions = last_block.transactions[0]
            # debug(last_transactions[0].hex(), color=Fore.LIGHTYELLOW_EX)
            self.update_features(contract, func_name, last_transactions)

            func = self.contracts[contract].function_records[func_name]

            if("RETURN" == func.opcodes[-1]): func.features['Return'] = 1
            if("REVERT" == func.opcodes[-1]): func.features['Revert'] = 1
            if("RETURN" == func.opcodes[-1]): func.features['Return'] = 1

            func.freq_exec = round(float(func.execution_count / self.contracts[contract].execution_count), 5)
            self.contracts[contract].function_records[func_name] = func
            
            debug(func.opcodes[-1], color=Fore.YELLOW)
            return {
                'SC': json.dumps(self.contracts[contract].features),
                'F':  json.dumps(self.contracts[contract].function_records[func_name].features),
                'Rewards': -1
            }
        
        
        