from colorama import Fore

def debug(*args, color=Fore.MAGENTA):
    print(color + "***************[DEBUG]***************")
    print(color + str(args))

class Category:
    def __init__(self, abi, ast):
        self.abi = abi
        self.ast = ast
        self.groups = {
            1: [], # payable + call
            2: [], # call
            3: [], # payable
            4: [], # selfdestruct
            5: []  # others
        }
        self.analyze()

    def signature(self, func_name, children): # brancrh = input.children[].children[].children[0].children
        args = []
        for child in children:
            args += [child['attributes']['type']]
        return func_name + '(' + ','.join(args) + ')'

    def analyze(self):
        variables = []
        for contract in self.ast['children']: # input.ast.children[]
            if(contract['attributes']['contractKind'] == 'contract'):
                for function in contract['children']: # input.ast.children[].children[]
                    if(function['name'] == 'VariableDeclaration'):
                        variables += function['attributes']['name']

                    elif(function['name'] == 'FunctionDefinition' and function['attributes']['name'] != ''):
                        function_name = function['attributes']['name']
                        
                        for component in function['children']:
                            check_payable = function['attributes']['payable']
                            if(component['name'] == 'Block'):
                                check_call1 = "'member_name': 'transfer" in str(component).lower()
                                check_call2 = "'member_name': 'send" in str(component).lower()
                                check_call3 = "'member_name': 'call" in str(component).lower()
                                check_selfdestruct = "selfdestruct" in str(component).lower()

                                if(check_payable and (check_call1 or check_call2 or check_call3)):
                                    self.groups[1] += [function_name]
                                    break

                                if(check_call1 or check_call2 or check_call3):
                                    self.groups[2] += [function_name]
                                    break
                                
                                if(check_payable):
                                    self.groups[3] += [function_name]
                                    break

                                if(check_selfdestruct):
                                    self.groups[4] += [function_name]
                                    break

                                self.groups[5] += [function_name]