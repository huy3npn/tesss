from web3 import Web3
from solcx import compile_source
import random
import datetime

Provider = 'http://127.0.0.1:8545'
w3       = Web3(Web3.HTTPProvider(Provider))
accounts = w3.eth.accounts
contract = None
bytecode = None
abi      = None

def deploy_contract(contract_name):
    global bytecode, abi, contract
    compiled_sol = compile_source(
        open(f'./contracts/{contract_name}.sol','r').read(),
        output_values=['abi', 'bin'],
        solc_version='0.4.26'
    )

    contract_id, contract_interface = compiled_sol.popitem()
    bytecode = contract_interface['bin']
    abi = contract_interface['abi']
    contract = w3.eth.contract(abi=abi, bytecode=bytecode)
    tx_hash = contract.constructor().transact({'from': accounts[0]})
    tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash) # Deploy
    print(f'Deploy contract {contract_name} at {tx_receipt.contractAddress}')
    return tx_receipt.contractAddress

def isPayable(function_name):
    for node in abi:
        if('name' in node):
            if(node['name'] == function_name and node['payable']):
                return True
    return False

def select_func(function_string):
    for func in contract.all_functions():
        if(function_string in str(func)):
            return func

    print('[-] Debug: Not found function')
    return None

def execute(function_string):
    func_name = function_string.split('(')[0]
    func_call = select_func(function_string)
    params    = function_string.split('(')[1].replace(')', '').split(',')
    random.seed(datetime.time.second)

    if(isPayable(func_name)): # if function is payable
        value = random.choice([0,-1e9,-10e9,1e9,10e9])
        data = {'from': accounts[1], 'value': value}
        try:
            func_call().call(data).transact()
        except Exception as err:
            print('[X] DEBUG: ', err)
    else:
        list_param = []

        # Randomize input
        for param in params:
            if('uint' in param):
                value = random.choice([0,1e9,10e9])
                list_param += [int(value)]
            elif('int' in param):
                value = random.choice([0,-1e9,-10e9,1e9,10e9])
                list_param += [int(value)]
            elif('address' in param):
                list_param += [accounts[1]]

        # Execute transaction
        try:
            print(f'Call {func_name}({str(list_param)})')
            func_call(*list_param).call()
        except Exception as err:
            print('[X] DEBUG: ', err)
                
contract_address = deploy_contract('0x9ac4883b0226fb37fa362dbd76564c539c4f0ee6_1')
contract         = w3.eth.contract(address=contract_address, abi=abi)
print(contract)
# execute('setOwner(address,uint2 56)')

# contract_address = '0x886eE9C584A49CF4430a9396a9b13C0778F267D5'
# player1 = w3.eth.contract(address=contract_address, abi=abi)
# player1.find_functions_by_name
# receipt = invest(param).call()
# print(invest)
# invest().call({'from': accounts[1], 'value': 500000000000})

# truffle_project = './project/'
# contract = ''
# execution = Execution()
# backend_loggers = execution.set_backend(truffle_project)
# contract_manager = execution.get_contracts()
# contract_manager.set_fuzz_contracts([contract])
# account_manager = execution.get_accounts()
# policy = PolicyRandom(execution, contract_manager, account_manager)
# obs = ObsRandom(contract_manager, account_manager, dataset_dump_path)

# environment = Environment(limit, seed)
# environment.fuzz_loop(policy, obs)

# print(w3.eth.getBalance(tx_receipt.contractAddress))